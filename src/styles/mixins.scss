$xs: $mobile;
$sm: $tablet;
$lg: $desktop;
$xlg: $desktop-xl;

@mixin clearfix() {

	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin character-counter() {
	display: flex;

	.hint {
		margin: 0;
	}

	.increment.shake {
		animation: shake .82s cubic-bezier(.36, .07, .19, .97) both;
	}
}

@mixin ellipsis {
	&.ellipsis {
		position: relative;
		width: auto;

		&.big {
			min-width: 15vw;
		}

		&:before {
			content: '&nbsp;';
			visibility: hidden;
		}

		>span,
		>a {
			position: absolute;
			left: math.div($padding, 4);
			right: math.div($padding, 4);
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		&:first-child {

			>span,
			>a {
				left: $padding;
			}
		}
	}
}

@mixin number-task() {
	.number {
		color: $primary-color;
		font-family: $header-font;
		font-weight: 700;
		padding-bottom: math.div($padding, 4);
		opacity: .7;

		&:only-of-type {
			padding-bottom: 0;
		}
	}
}

@mixin clickable-text {
	cursor: pointer;
	transition: color $fast-speed;

	&:hover {
		color: $primary-color;
	}
}

@mixin scrollbar() {
	&::-webkit-scrollbar {
		appearance: none;
		width: 7px;
		height: 7px;
		background: $light-grey;
	}

	&::-webkit-scrollbar-thumb {
		border-radius: 4px;
		background: rgba(0, 0, 0, .5);
		box-shadow: 0 0 1px rgba(255, 255, 255, .5);
	}
}

// --------------------------------------------------
// reflex modifier mixins
// --------------------------------------------------


//
// flex
// ---
@mixin flex-direction($direction: row) {
	flex-direction: $direction;
}

// --------------------------------------------------
// other mixins
// --------------------------------------------------

@mixin box-sizing($boxmodel) {
	box-sizing: $boxmodel;
}

// Responsive mixins
@mixin mobile {
	@media (max-width: $tablet - 1) {
		@content;
	}
}

@mixin tablet {
	@media (min-width: $tablet) and (max-width: $desktop - 1) {
		@content;
	}
}

@mixin tablet-and-under {
	@media (max-width: $desktop - 1) {
		@content;
	}
}

@mixin desktop {
	@media (min-width: $desktop) and (max-width: $desktop-xl - 1) {
		@content;
	}
}

@mixin desktop-and-under {
	@media (max-width: $desktop-xl - 1) {
		@content;
	}
}

@mixin desktop-xl {
	@media (min-width: $desktop-xl) {
		@content;
	}
}

// Z-index mixin
@function z-index($key) {
	@return map-get($z-index, $key);
}

@mixin z-index($key) {
	z-index: z-index($key);
}

// COLOR depending of background
@function good-contrast($color) {
	@if (lightness($color) > 71) {
		// Lighter color, return black
		@return $text-color;
	}

	@else {
		// Darker color, return white
		@return white;
	}
}

// Number with decimal rounded
@function decimal-round($number, $digits: 0, $mode: round) {
	$n: 1;

	// $number must be a number
	@if type-of($number) !=number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}

	// $digits must be a unitless number
	@if type-of($digits) !=number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	}

	@else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@if $digits>0 {
		@for $i from 1 through $digits {
			$n: $n * 10;
		}
	}

	@if $mode==round {
		@return math.div(round($number * $n), $n);
	}

	@else if $mode==ceil {
		@return math.div(ceil($number * $n), $n);
	}

	@else if $mode==floor {
		@return math.div(floor($number * $n), $n);
	}

	@else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

@mixin triangle($color:#000, $size:'.5rem', $direction:'top') {
	content: "";
	width: 0;
	height: 0;
	display: block;
	position: absolute;

	@if $direction=='top' {
		border-right: $size solid transparent;
		border-left: $size solid transparent;
		border-bottom: $size solid $color;
		top: -$size;
		left: 50%;
		transform: translateX(-50%);
	}

	@if $direction=='bottom' {
		border-right: $size solid transparent;
		border-left: $size solid transparent;
		border-top: $size solid $color;
		bottom: -$size;
		left: 50%;
		transform: translateX(-50%);
	}

	@if $direction=='right' {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		right: -$size;
		top: 50%;
		transform: translateY(-50%);
	}

	@if $direction=='left' {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		left: -$size;
		top: 50%;
		transform: translateY(-50%);
	}
}

// Transparent background mixin
@mixin transparent-background($gridSize: 3px) {
	background: linear-gradient(45deg, rgba(black, .2) 25%, transparent 25%, transparent 75%, rgba(black, .2) 75%, rgba(black, .2) 0), linear-gradient(45deg, rgba(black, .2) 25%, transparent 25%, transparent 75%, rgba(black, .2) 75%, rgba(black, .2) 0), white;
	background-position: 0 0, $gridSize $gridSize;
	background-size: $gridSize * 2 $gridSize * 2;
}

/* Display element with border and background for debugging */
@mixin debug($color:red) {
	box-shadow: 0 0 0 1px rgba($color, .5) !important;
	background: rgba($color, .15) !important;
	color: black !important;
}

@mixin y-translation($amount) {
	transform: translateY($amount);
}

@mixin x-translation($amount) {
	transform: translateX($amount);
}

@mixin translation($xAmount, $yAmount) {
	transform: translate($xAmount, $yAmount);
}

@function form-element-border($status) {
	$color: $primary-color;

	@if ($status=='error') {
		$color: $red;
	}

	@return $border-width solid rgba($color, .4);
}

@mixin form-element-border($status: '', $border: '') {
	@if ($border=='left') {
		border-left: form-element-border($status);
	}

	@if ($border=='right') {
		border-right: form-element-border($status);
	}

	@if ($border=='top') {
		border-top: form-element-border($status);
	}

	@if ($border=='bottom') {
		border-bottom: form-element-border($status);
	}

	@if ($border=='') {
		border: form-element-border($status);
	}
}
